name: Deploy to EC2 via ASG

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Code clone
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 3Ô∏è‚É£ Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4Ô∏è‚É£ Build, Tag, and Push image (latest)
      - name: Build, Tag, and Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: myapp-repo
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 4.1 üóë Delete old images
      - name: Delete old images from ECR
        run: |
          IMAGE_IDS=$(aws ecr list-images \
            --repository-name myapp-repo \
            --filter tagStatus=TAGGED \
            --query 'imageIds[?imageTag!=`latest`]' \
            --output json)

          if [ "$IMAGE_IDS" != "[]" ]; then
            aws ecr batch-delete-image \
              --repository-name myapp-repo \
              --image-ids "$IMAGE_IDS"
          else
            echo "No old images to delete."
          fi

      # 5Ô∏è‚É£ Create new Launch Template version with SG and UserData
      - name: Create new Launch Template version with SG and UserData
        run: |
          # Get latest launch template version number
          LATEST_VERSION=$(aws ec2 describe-launch-template-versions \
            --launch-template-name mytemplate \
            --query 'LaunchTemplateVersions[-1].VersionNumber' \
            --output text)

          echo "Latest Launch Template Version: $LATEST_VERSION"

          # Get SG ID for Nginx-sg
          SG_ID=$(aws ec2 describe-security-groups \
            --filters Name=group-name,Values=Nginx-sg \
            --query 'SecurityGroups[0].GroupId' \
            --output text)

          echo "Using Security Group ID: $SG_ID"

          # Base64 encode userdata.sh (assuming your userdata script is in repo root as userdata.sh)
          USERDATA_B64=$(base64 -w 0 userdata.sh)

          # Create new launch template version with updated AMI, SG and UserData
          aws ec2 create-launch-template-version \
            --launch-template-name mytemplate \
            --source-version $LATEST_VERSION \
            --version-description "Deploy $(date +%Y-%m-%d:%H:%M)" \
            --launch-template-data "{\"ImageId\":\"ami-0de716d6197524dd9\",\"NetworkInterfaces\":[{\"DeviceIndex\":0,\"Groups\":[\"$SG_ID\"]}],\"UserData\":\"$USERDATA_B64\"}"

          # Get the new version number just created
          NEW_VERSION=$(aws ec2 describe-launch-template-versions \
            --launch-template-name mytemplate \
            --query 'LaunchTemplateVersions[-1].VersionNumber' \
            --output text)

          echo "New Launch Template Version Created: $NEW_VERSION"

          # Update Auto Scaling Group to use new launch template version
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name anish-asg \
            --launch-template "LaunchTemplateName=mytemplate,Version=$NEW_VERSION"

      # 6Ô∏è‚É£ Trigger ASG instance refresh for rolling update (zero downtime)
      - name: Start ASG Instance Refresh
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name anish-asg \
            --preferences '{"MinHealthyPercentage": 100, "InstanceWarmup": 300}'
          echo "Instance refresh triggered successfully."

      # ‚úÖ 
      - name: Notify Deployment Success
        run: echo "Deployment to EC2 via Auto Scaling Group completed successfully with zero downtime."