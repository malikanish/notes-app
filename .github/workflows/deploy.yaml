name: Deploy to EC2 via ASG

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Code clone
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 3️⃣ Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4️⃣ Build, Tag, and Push image (latest + version tag)
      - name: Build, Tag, and Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: myapp-repo
          IMAGE_TAG: ${{ github.sha }} # or custom version
        run: |
          # Build with version tag
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Also tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
                     $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # 5️⃣ Create new Launch Template version with updated UserData (APP_VERSION)
      - name: Create new Launch Template version with versioned UserData
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          LATEST_VERSION=$(aws ec2 describe-launch-template-versions \
            --launch-template-name mytemplate \
            --query 'LaunchTemplateVersions[-1].VersionNumber' \
            --output text)

          echo "Latest Launch Template Version: $LATEST_VERSION"

          # Replace APP_VERSION placeholder in userdata
          sed "s|APP_VERSION=.*|APP_VERSION=\"$IMAGE_TAG\"|" userdata.sh > userdata_temp.sh
          USERDATA_B64=$(base64 -w 0 userdata_temp.sh)

          aws ec2 create-launch-template-version \
            --launch-template-name mytemplate \
            --source-version $LATEST_VERSION \
            --version-description "Deploy $(date +%Y-%m-%d:%H:%M)" \
            --launch-template-data "{\"ImageId\":\"ami-0de716d6197524dd9\",\"UserData\":\"$USERDATA_B64\"}"

          NEW_VERSION=$(aws ec2 describe-launch-template-versions \
            --launch-template-name mytemplate \
            --query 'LaunchTemplateVersions[-1].VersionNumber' \
            --output text)

          echo "New Launch Template Version Created: $NEW_VERSION"

          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name anish-asg \
            --launch-template "LaunchTemplateName=mytemplate,Version=$NEW_VERSION"

      # 6️⃣ Update ASG Health Check Settings
      - name: Update ASG Health Check Settings
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name anish-asg \
            --health-check-type EC2 \
            --health-check-grace-period 300

      # 7️⃣ Trigger ASG instance refresh
      - name: Start ASG Instance Refresh
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name anish-asg \
            --preferences '{"MinHealthyPercentage": 75, "MaxHealthyPercentage": 150, "InstanceWarmup": 300}'
          echo "Instance refresh triggered successfully."
